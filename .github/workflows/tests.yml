name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest]
        swift-version: ['6.0']
      fail-fast: false
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install Dependencies and Swift (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        # Install dependencies including OpenSSL for TLS certificate generation and certbot for Let's Encrypt
        sudo apt-get update
        sudo apt-get install -y curl openssl certbot
        
        # Download and install Swift 6.0.1 directly
        cd /tmp
        curl -LO "https://download.swift.org/swift-6.0.1-release/ubuntu2204/swift-6.0.1-RELEASE/swift-6.0.1-RELEASE-ubuntu22.04.tar.gz"
        tar xzf swift-*.tar.gz
        sudo mv swift-*-RELEASE-ubuntu22.04 /usr/local/swift
        echo "/usr/local/swift/usr/bin" >> $GITHUB_PATH
        
    - name: Install Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install OpenSSL for TLS certificate generation and certbot for Let's Encrypt
        brew install openssl certbot
        
    - name: Setup Xcode (macOS)
      if: matrix.os == 'macos-latest'
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Setup macOS environment
      if: matrix.os == 'macos-latest'
      run: |
        # Set up environment for Swift testing on macOS
        echo "DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer" >> $GITHUB_ENV
        echo "TOOLCHAINS=swift" >> $GITHUB_ENV
        
    - name: Verify Swift Installation
      run: |
        swift --version
        
    - name: Verify OpenSSL Installation
      run: |
        echo "Checking OpenSSL availability..."
        which openssl || (echo "OpenSSL not found in PATH" && exit 1)
        openssl version || (echo "OpenSSL version command failed" && exit 1)
        echo "OpenSSL is properly installed and functional"
        
    - name: Verify Certbot Installation
      run: |
        echo "Checking certbot availability..."
        which certbot || (echo "Certbot not found in PATH" && exit 1)
        certbot --version || (echo "Certbot version command failed" && exit 1)
        echo "Certbot is properly installed and functional"
        
    - name: Run Tests
      run: swift test -v
      
    - name: Test Certbot Integration
      run: |
        echo "Testing certbot detection and Let's Encrypt functionality..."
        # Test that certbot is detected properly
        swift run SwiftServe --help | grep -q "letsencrypt" || (echo "Let's Encrypt CLI option not found" && exit 1)
        echo "✅ Let's Encrypt CLI options are properly exposed"
        
        # Test error handling when certbot is temporarily unavailable
        echo "Testing error handling when certbot is unavailable..."
        sudo mv $(which certbot) $(which certbot).backup 2>/dev/null || true
        
        # This should fall back to self-signed certificates gracefully
        # Start server in background with timeout
        timeout 10s swift run SwiftServe --letsencrypt --domain test.example.com --email test@example.com --port 9999 > /dev/null 2>&1 &
        SERVER_PID=$!
        sleep 2
        kill $SERVER_PID 2>/dev/null || true
        wait $SERVER_PID 2>/dev/null || true
        
        # Restore certbot
        sudo mv $(which certbot).backup $(which certbot) 2>/dev/null || true
        echo "✅ Graceful fallback to self-signed certificates works correctly"